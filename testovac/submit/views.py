from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404, redirect
from django.core.exceptions import PermissionDenied
from django.core.urlresolvers import reverse
from django.http import Http404
from django.views.decorators.http import require_POST

from sendfile import sendfile

import os

from .models import Submit, SubmitReceiver
from . import settings as submit_settings
from .forms import SourceSubmitForm, DescriptionSubmitForm, TestableZipSubmitForm


def protocol_data(protocol_path, force_show_details=False):
    return {}


def render_testing_results(request, submit):
    """
    Display testing results, source code and submit list, if the submit was generated by automated tester.
    """
    template_data = {
            'submit': submit,
            'show_testing_results': True,
            'show_source': False,
        }
    template_data.update(protocol_data(submit.protocol_path(), submit.type == Submit.TESTABLE_ZIP))
    if os.path.exists(submit.source_path()):
        # Source code available, display it!
        if submit.type == Submit.SOURCE:
            template_data['show_source'] = True
            with open(submit.source_path(), "r") as submit_file:
                data = submit_file.read()
                template_data['source_file_data'] = data.decode('utf-8', 'replace')
        else:
            template_data['is_zip'] = True

    return render(
        request, 'submit/view_submit.html', template_data
    )


def send_submitted_file(request, submit):
    """
    Display files with VIEWABLE_EXTENSIONS in browser, offer download for other files.
    """
    extension = os.path.splitext(submit.filename)[1]
    send_as_attachment = extension.lower() not in submit_settings.VIEWABLE_EXTENSIONS
    if os.path.exists(submit.source_path()):
        return sendfile(
            request,
            submit.source_path(),
            attachment=send_as_attachment,
            attachment_filename=submit.filename
        )
    else:
        raise Http404


def render_empty_submit(request, submit):
    return render(
        request, 'submit/view_submit.html', {
            'submit': submit,
            'show_tester_results': False
        }
    )


@login_required
def view_submit(request, submit_id):
    """
    View for different reactions based on different SUBMIT_TYPES.
    Override if you want different privileges or different behaviour.
    """
    submit = get_object_or_404(Submit, pk=submit_id)
    if submit.user != request.user and not request.user.is_staff:
        raise PermissionDenied()

    actions = {
        Submit.SOURCE: render_testing_results,
        Submit.TESTABLE_ZIP: render_testing_results,
        Submit.DESCRIPTION: send_submitted_file,
        Submit.EXTERNAL: render_empty_submit,
    }

    return actions[submit.type](request, submit)


def form_is_valid(request, submit_type):
    if submit_type == Submit.EXTERNAL:
        return True

    forms = {
        Submit.SOURCE: SourceSubmitForm,
        Submit.TESTABLE_ZIP: TestableZipSubmitForm,
        Submit.DESCRIPTION: DescriptionSubmitForm,
    }

    form = forms[submit_type](request.POST, request.FILES)

    if form.is_valid():
        return True
    else:
        for field in form:
            for error in field.errors:
                messages.add_message(request, messages.ERROR, "%s: %s" % (field.label, error))
        return False


def redirect_after_post(request, receiver):
    if 'redirect_to' in request.POST and request.POST['redirect_to']:
        return redirect(request.POST['redirect_to'])
    else:
        return redirect(
            reverse(
                'receiver_submit_page', kwargs={'receiver_id': receiver.id}
            )
        )


@login_required
@require_POST
def post_submit(request, receiver_id):
    receiver = get_object_or_404(SubmitReceiver, pk=receiver_id)
    submit_type = request.POST['submit_type']
    if not receiver.has_submit_type(submit_type):
        raise Http404

    if form_is_valid(request, submit_type):
        # File will be sent to tester
        if submit_type == Submit.SOURCE or submit_type == Submit.TESTABLE_ZIP:
            pass

        # File won't be sent to tester
        elif submit_type == Submit.DESCRIPTION:
            pass

        else:
            raise Http404

    return redirect_after_post(request, receiver)
